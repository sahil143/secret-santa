// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  INVITED
  DECLINED
  ACCEPTED
}

enum Role {
  ADMIN
  USER
}

model User {
  id             Int        @id @default(autoincrement())
  email          String
  password       String
  name           String
  avatar         String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  role           Role
  event          Event[]
  invite         Invite[]
  santa          Pairing[]  @relation(name: "pairing_santa")
  person         Pairing[]  @relation(name: "pairing_person")
  thankYouUser   ThankYou[] @relation(name: "thankYou_user")
  thankYouToUser ThankYou[] @relation(name: "thankYou_toUser")
  wishList       WishList[]
}

model Invite {
  id      String @id @default(uuid())
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @unique
  status  Status @default(INVITED)
  email   String
  name    String
}

model Event {
  id           String     @id @default(uuid())
  name         String
  date         DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  sendReminder Boolean
  user         User       @relation(fields: [owner], references: [id])
  owner        Int        @unique
  invite       Invite[]
  pairing      Pairing[]
  thankYou     ThankYou[]
  wishList     WishList[]
}

model Pairing {
  id        Int      @id @default(autoincrement())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  santa     User     @relation(fields: [santaId], references: [id], name: "pairing_santa")
  santaId   Int
  person    User     @relation(fields: [personId], references: [id], name: "pairing_person")
  personId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThankYou {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id], name: "thankYou_user")
  userId    Int
  toUser    User     @relation(fields: [toUserId], references: [id], name: "thankYou_toUser")
  toUserId  Int
  message   String
  createdAt DateTime @default(now())
}

model WishList {
  id              Int      @id @default(autoincrement())
  name            String
  url             String
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Int
  event           Event    @relation(fields: [eventId], references: [id])
  eventId         String
  siteImage       String
  siteTitle       String
  siteDescription String
}
